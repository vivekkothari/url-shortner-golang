//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var URLShortner = newURLShortnerTable("public", "url_shortner", "")

type uRLShortnerTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnInteger
	LongURL        postgres.ColumnString
	CreatedAt      postgres.ColumnTimestampz
	LastAccessedAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type URLShortnerTable struct {
	uRLShortnerTable

	EXCLUDED uRLShortnerTable
}

// AS creates new URLShortnerTable with assigned alias
func (a URLShortnerTable) AS(alias string) *URLShortnerTable {
	return newURLShortnerTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new URLShortnerTable with assigned schema name
func (a URLShortnerTable) FromSchema(schemaName string) *URLShortnerTable {
	return newURLShortnerTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new URLShortnerTable with assigned table prefix
func (a URLShortnerTable) WithPrefix(prefix string) *URLShortnerTable {
	return newURLShortnerTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new URLShortnerTable with assigned table suffix
func (a URLShortnerTable) WithSuffix(suffix string) *URLShortnerTable {
	return newURLShortnerTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newURLShortnerTable(schemaName, tableName, alias string) *URLShortnerTable {
	return &URLShortnerTable{
		uRLShortnerTable: newURLShortnerTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newURLShortnerTableImpl("", "excluded", ""),
	}
}

func newURLShortnerTableImpl(schemaName, tableName, alias string) uRLShortnerTable {
	var (
		IDColumn             = postgres.IntegerColumn("id")
		LongURLColumn        = postgres.StringColumn("long_url")
		CreatedAtColumn      = postgres.TimestampzColumn("created_at")
		LastAccessedAtColumn = postgres.TimestampzColumn("last_accessed_at")
		allColumns           = postgres.ColumnList{IDColumn, LongURLColumn, CreatedAtColumn, LastAccessedAtColumn}
		mutableColumns       = postgres.ColumnList{LongURLColumn, CreatedAtColumn, LastAccessedAtColumn}
		defaultColumns       = postgres.ColumnList{}
	)

	return uRLShortnerTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		LongURL:        LongURLColumn,
		CreatedAt:      CreatedAtColumn,
		LastAccessedAt: LastAccessedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
